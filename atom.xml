<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QCFblog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-02-23T02:18:09.097Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>QianChaoFei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/02/23/JavaScript/"/>
    <id>http://yoursite.com/2017/02/23/JavaScript/</id>
    <published>2017-02-23T02:09:18.450Z</published>
    <updated>2017-02-23T02:18:09.097Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="JavaScript-小总结"><a href="#JavaScript-小总结" class="headerlink" title="JavaScript 小总结"></a>JavaScript 小总结</h2><h2 id="语法和类型"><a href="#语法和类型" class="headerlink" title="语法和类型"></a>语法和类型</h2><h4 id="1-声明定义"><a href="#1-声明定义" class="headerlink" title="1.声明定义"></a>1.声明定义</h4><p>变量类型：var，定义变量；let，定义块域(scope)本地变量；const，定义只读常量。<br>变量格式：以字母、下划线“_”或者$符号开头，大小写敏感。<br>变量赋值：声明但未赋值的变量在使用时值为undefined，未声明的变量直接使用会抛异常。<br>未赋值变量作计算：结果为NaN。例如：</p>
<pre><code> var a, b = 3;
console.log(a + b); //结果为NaN，因为a没有赋值。
</code></pre><a id="more"></a>
<h4 id="2-作用域"><a href="#2-作用域" class="headerlink" title="2.作用域"></a>2.作用域</h4><p>变量作用域：在ES6之前没有块声明域，变量作用于函数块或者全局。如下面的代码输入的a为10。</p>
<pre><code>if (true) {
var a = 10;
}
console.log(a); // 10
</code></pre><p>ES6变量作用域：ES6支持块作用域，但需要使用let声明变量。下面的代码输出结果抛出异常。</p>
<pre><code>if (true) {
let b = 5;
}console.log(b); // ReferenceError: b is not defined
</code></pre><p>变量上浮：在一个方法或者全局代码中，我们在生命变量之前使用变量时并没有抛异常，而是返回undefined。这是因为javascript自动把变量的声明上浮到函数或者全局的最前面。如下面的代码:</p>
<pre><code>/**
* 全局变量上浮
*/
console.log(a === undefined); // logs &quot;true&quot;
var a = 5;

/**
* 方法变量上浮
*/
var str = &quot;str1&quot;;
// 打印变量str结果为：undefined
(function() {
console.log(str); // undefined
var str = &quot;str2&quot;;
})();
</code></pre><p>全局变量：在页面中，全局对象是window，所以我们访问全局变量可通过window.variable。例如：</p>
<pre><code>str = &quot;小柯基&quot;;
console.log(window.str); //输出 小柯基
</code></pre><h2 id="数据结构和类型"><a href="#数据结构和类型" class="headerlink" title="数据结构和类型"></a>数据结构和类型</h2><h4 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1. 数据类型"></a>1. 数据类型</h4><p>6个基础类型：Boolean（true或者false）、null（js大小写敏感，和Null、NULL是有区别的）、undefined、Number、String、Symbol（标记唯一和不可变）<br>一个对象类型：object。<br>object和function：对象作为值的容器，函数作为应用程序的过程。</p>
<h4 id="2-数据转换"><a href="#2-数据转换" class="headerlink" title="2. 数据转换"></a>2. 数据转换</h4><p>函数：字符串转换为数字可使用parseInt和parseFloat方法。<br>parseInt：函数签名为parseInt(string, radix)，radix是2-36的数字表示数字基数，例如十进制或者十六进制。返回结果为integer或者NaN，例如下面输出结果都为15。</p>
<pre><code>parseInt(&quot;0xF&quot;, 16);
parseInt(&quot;F&quot;, 16);
parseInt(&quot;17&quot;, 8);
parseInt(021, 8);
parseInt(&quot;015&quot;, 10);
parseInt(15.99, 10);
arseInt(&quot;15,123&quot;, 10);
parseInt(&quot;FXX123&quot;, 16);
parseInt(&quot;1111&quot;, 2);
parseInt(&quot;15*3&quot;, 10);
parseInt(&quot;15e2&quot;, 10);
parseInt(&quot;15px&quot;, 10);
</code></pre><p>parseFloat：函数签名为parseFloat(string)，返回结果为数字或者NaN。例如</p>
<pre><code>parseFloat(&quot;3.14&quot;); //返回数字
parseFloat(&quot;314e-2&quot;); //返回数字
parseFloat(&quot;more non-digit characters&quot;); //返回NaN
</code></pre><h4 id="3-数据类型文本化"><a href="#3-数据类型文本化" class="headerlink" title="3. 数据类型文本化"></a>3. 数据类型文本化</h4><p>文本化类型：Array、Boolean、Floating-point 、integers、Object、RegExp、String。<br>Array中额外的逗号情况：[“Lion”, , “Angel”]，长度为3，[1]的值为undefiend。[‘home’, , ‘school’, ]，最后一个逗号省略所以长度为3。[ , ‘home’, , ‘school’]，长度为4。[‘home’, , ‘school’, , ]，长度为4。</p>
<p>integer整数：整数可以表达为十进制、八进制、十六进制、二进制。例如：</p>
<pre><code>0, 117 and -345 //十进制
015, 0001 and -0o77 //八进制
0x1123, 0x00111 and -0xF1A7 //十六进制
0b11, 0b0011 and -0b11 1234 //二进制
</code></pre><p>浮点数：[(+|-)][digits][.digits][(E|e)[(+|-)]digits]。例如：</p>
<pre><code>3.1415926，-.123456789，-3.1E+12（3100000000000），.1e-23（1e-24）
</code></pre><p>对象：对象的属性获取值可通过“.属性”或者“[属性名]”获取。例如：</p>
<pre><code>var car = { manyCars: {a: &quot;Saab&quot;, &quot;b&quot;: &quot;Jeep&quot;}, 7: &quot;Mazda&quot; };
console.log(car.manyCars.b); // Jeep
console.log(car[7]); // Mazda
</code></pre><p>对象属性：属性名可以是任意字符串或者空字符串，无效的名字可通过引号包含起来。复杂的名字不能通过.获取，但可以通过[]获取。例如：</p>
<pre><code>var unusualPropertyNames = {
&quot;&quot;: &quot;An empty string&quot;,
&quot;!&quot;: &quot;Bang!&quot;
}
console.log(unusualPropertyNames.&quot;&quot;); // SyntaxError: Unexpected string
console.log(unusualPropertyNames[&quot;&quot;]); // An empty string
console.log(unusualPropertyNames.!); // SyntaxError: Unexpected token !
console.log(unusualPropertyNames[&quot;!&quot;]); // Bang!
</code></pre><p>转意字符：下面的字符串输出结果包含了双引号，因为使用了转意符号“\””。</p>
<pre><code>var quote = &quot;He read \&quot;The Cremation of Sam McGee\&quot; by R.W. Service.&quot;;
console.log(quote);
//输出：He read &quot;The Cremation of Sam McGee&quot; by R.W. Service.1。
</code></pre><p>字符串换行法：直接在字符串行结束时添加“\”，如下代码所示：</p>
<pre><code>var str = &quot;this string \
is broken \
across multiple\
lines.&quot;
console.log(str); // this string is broken across multiplelines.
</code></pre><h2 id="控制流和错误处理"><a href="#控制流和错误处理" class="headerlink" title="控制流和错误处理"></a>控制流和错误处理</h2><h4 id="1-块表达式"><a href="#1-块表达式" class="headerlink" title="1. 块表达式"></a>1. 块表达式</h4><p>作用：块表达式一般用于控制流，像if、for、while。下面的代码中{x++;}就是一个块声明。</p>
<pre><code>while (x &lt; 10) {
x++;
}
</code></pre><p>ES6之前没有块域范围：在ES6之前，在block中定义的变量实际是包含在方法或者全局中，变量的影响超出了块作用域的范围。例如下面的代码最终执行结果为2，因为block中声明的变量作用于方法。</p>
<pre><code>var x = 1;
{
var x = 2;
}
console.log(x); // outputs 2
</code></pre><p>ES6之后有块域范围：在ES6中，我们可以把块域声明var改成let，让变量只作用域block范围。</p>
<pre><code>var x = 1;
{
var x = 2;
}
console.log(x); // outputs 2
</code></pre><p>ES6之后有块域范围：在ES6中，我们可以把块域声明var改成let，让变量只作用域block范围</p>
<h4 id="2-逻辑判断"><a href="#2-逻辑判断" class="headerlink" title="2. 逻辑判断"></a>2. 逻辑判断</h4><p>判断为false的特殊值：false、undefined、null、0、NaN、””。<br>简单boolean和对象Boolean类型：简单boolean类型的false和true与对象Boolean类型的false和true是有区别，两者是不相等的。如下面的例子：</p>
<pre><code>var b = new Boolean(false);
if (b) // 返回true
if (b == true) // 返回false
</code></pre><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h4 id="1-异常类型"><a href="#1-异常类型" class="headerlink" title="1. 异常类型"></a>1. 异常类型</h4><p>抛出异常语法：抛异常可以是任意类型。如下所示。</p>
<pre><code>throw &quot;Error2&quot;; // 字符串类型
throw 42; // 数字类型
throw true; // 布尔类型
throw {toString: function() { return &quot;I&apos;m an object!&quot;; } }; //对象类型
</code></pre><p>自定义异常：</p>
<pre><code>// 创建一个对象类型UserException
function UserException(message) {
this.message = message;
this.name = &quot;UserException&quot;;
}

//重写toString方法，在抛出异常时能直接获取有用信息
UserException.prototype.toString = function() {
return this.name + &apos;: &quot;&apos; + this.message + &apos;&quot;&apos;;
}

// 创建一个对象实体并抛出它
throw new UserException(&quot;Value too high&quot;);
</code></pre><h4 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h4><p>关键字：使用try{}catch(e){}finally{}语法，和C#语法相似。<br>finally返回值：如果finaly添加了return 语句，则不管整个try.catch返回什么，返回值都是finally的return。如下所示：</p>
<pre><code>function f() {
try {
    console.log(0);
    throw &quot;bogus&quot;;
} catch(e) {
    console.log(1);
    return true; // 返回语句被暂停，直到finally执行完成
    console.log(2); // 不会执行的代码
} finally {
    console.log(3);
    return false; //覆盖try.catch的返回
    console.log(4); //不会执行的代码
}
// &quot;return false&quot; is executed now 
console.log(5); // not reachable
}
f(); // 输出 0, 1, 3; 返回 false
</code></pre><p>finally吞并异常：如果finally有return并且catch中有throw异常。throw的异常不会被捕获，因为已经被finally的return覆盖了。如下代码所示：</p>
<pre><code>    try {
    throw &quot;bogus&quot;;
} catch(e) {
    console.log(&apos;caught inner &quot;bogus&quot;&apos;);
    throw e; // throw语句被暂停，直到finally执行完成
} finally {
    return false; // 覆盖try.catch中的throw语句
}
// 已经执行了&quot;return false&quot;
}

try {
f();
} catch(e) {
//这里不会被执行，因为catch中的throw已经被finally中的return语句覆盖了
console.log(&apos;caught outer &quot;bogus&quot;&apos;);
}
// 输出
// caught inner &quot;bogus&quot;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;JavaScript-小总结&quot;&gt;&lt;a href=&quot;#JavaScript-小总结&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 小总结&quot;&gt;&lt;/a&gt;JavaScript 小总结&lt;/h2&gt;&lt;h2 id=&quot;语法和类型&quot;&gt;&lt;a href=&quot;#语法和类型&quot; class=&quot;headerlink&quot; title=&quot;语法和类型&quot;&gt;&lt;/a&gt;语法和类型&lt;/h2&gt;&lt;h4 id=&quot;1-声明定义&quot;&gt;&lt;a href=&quot;#1-声明定义&quot; class=&quot;headerlink&quot; title=&quot;1.声明定义&quot;&gt;&lt;/a&gt;1.声明定义&lt;/h4&gt;&lt;p&gt;变量类型：var，定义变量；let，定义块域(scope)本地变量；const，定义只读常量。&lt;br&gt;变量格式：以字母、下划线“_”或者$符号开头，大小写敏感。&lt;br&gt;变量赋值：声明但未赋值的变量在使用时值为undefined，未声明的变量直接使用会抛异常。&lt;br&gt;未赋值变量作计算：结果为NaN。例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; var a, b = 3;
console.log(a + b); //结果为NaN，因为a没有赋值。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/02/09/webpack/"/>
    <id>http://yoursite.com/2017/02/09/webpack/</id>
    <published>2017-02-09T14:25:45.453Z</published>
    <updated>2017-02-10T03:03:25.681Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。<br><a id="more"></a></p>
<p>伴随着移动互联的大潮，当今越来越多的网站已经从网页模式进化到了 Webapp 模式。它们运行在现代的高级浏览器里，使用 HTML5、 CSS3、 ES6 等更新的技术来开发丰富的功能，网页已经不仅仅是完成浏览的基本需求，并且webapp通常是一个单页面应用，每一个视图通过异步的方式加载，这导致页面初始化和使用过程中会加载越来越多的 JavaScript 代码，这给前端开发的流程和资源组织带来了巨大的挑战。</p>
<p>前端开发和其他开发工作的主要区别，首先是前端是基于多语言、多层次的编码和组织工作，其次前端产品的交付是基于浏览器，这些资源是通过增量加载的方式运行到浏览器端，如何在开发环境组织好这些碎片化的代码和资源，并且保证他们在浏览器端快速、优雅的加载和更新，就需要一个模块化系统，这个理想中的模块化系统是前端工程师多年来一直探索的难题。</p>
<h2 id="安装与配置"><a href="#安装与配置" class="headerlink" title="安装与配置"></a>安装与配置</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先要安装 Node.js， Node.js 自带了软件包管理器 npm，Webpack 需要 Node.js v0.6 以上支持，建议使用最新版 Node.js。</p>
<p>用 npm 安装 Webpack：</p>
<blockquote>
<p>npm install webpack -g</p>
</blockquote>
<p>此时 Webpack 已经安装到了全局环境下，可以通过命令行 webpack -h 试试。</p>
<p>通常我们会将 Webpack 安装到项目的依赖中，这样就可以使用项目本地版本的 Webpack。</p>
<blockquote>
<h1 id="进入项目目录"><a href="#进入项目目录" class="headerlink" title="进入项目目录"></a>进入项目目录</h1><h1 id="确定已经有-package-json，没有就通过-npm-init-创建"><a href="#确定已经有-package-json，没有就通过-npm-init-创建" class="headerlink" title="确定已经有 package.json，没有就通过 npm init 创建"></a>确定已经有 package.json，没有就通过 npm init 创建</h1><h1 id="安装-webpack-依赖"><a href="#安装-webpack-依赖" class="headerlink" title="安装 webpack 依赖"></a>安装 webpack 依赖</h1><p> npm install webpack –save-dev</p>
</blockquote>
<p>Webpack 目前有两个主版本，一个是在 master 主干的稳定版，一个是在 webpack-2 分支的测试版，测试版拥有一些实验性功能并且和稳定版不兼容，在正式项目中应该使用稳定版。</p>
<blockquote>
<h1 id="查看-webpack-版本信息"><a href="#查看-webpack-版本信息" class="headerlink" title="查看 webpack 版本信息"></a>查看 webpack 版本信息</h1><p>  npm info webpack</p>
<h1 id="安装指定版本的-webpack"><a href="#安装指定版本的-webpack" class="headerlink" title="安装指定版本的 webpack"></a>安装指定版本的 webpack</h1><p>$ npm install webpack@1.12.x –save-dev</p>
</blockquote>
<p>如果需要使用 Webpack 开发工具，要单独安装：</p>
<blockquote>
<p>npm install webpack-dev-server –save-dev</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>首先创建一个静态页面 index.html 和一个 JS 入口文件 entry.js：</p>
<pre><code>&lt;!-- index.html --&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset=&quot;utf-8&quot;&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre><blockquote>
<p>// entry.js<br>document.write(‘It works.’)</p>
</blockquote>
<p>然后编译 entry.js 并打包到 bundle.js：</p>
<pre><code>webpack entry.js bundle.js
</code></pre><p>打包过程会显示日志：</p>
<blockquote>
<p>Hash: e964f90ec65eb2c29bb9<br>Version: webpack 1.12.2<br>Time: 54ms<br>    Asset     Size  Chunks             Chunk Names<br>bundle.js  1.42 kB       0  [emitted]  main<br>   [0] ./entry.js 27 bytes {0} [built]</p>
</blockquote>
<p>用浏览器打开 index.html 将会看到 It works. 。</p>
<p>接下来添加一个模块 module.js 并修改入口 entry.js：</p>
<blockquote>
<p>// module.js<br>module.exports = ‘It works from module.js.’</p>
</blockquote>
<pre><code>// entry.js
document.write(&apos;It works.&apos;)
document.write(require(&apos;./module.js&apos;)) // 添加模块
</code></pre><p>重新打包 webpack entry.js bundle.js 后刷新页面看到变化 It works.It works from module.js.</p>
<blockquote>
<p>  Hash: 279c7601d5d08396e751<br>Version: webpack 1.12.2<br>Time: 63ms<br>    Asset     Size  Chunks             Chunk Names<br>bundle.js  1.57 kB       0  [emitted]  main<br>   [0] ./entry.js 66 bytes {0} [built]<br>   [1] ./module.js 43 bytes {0} [built]</p>
</blockquote>
<p>Webpack 会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到 bundle.js 。Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。在页面启动时，会先执行 entry.js 中的代码，其它模块会在运行 require 的时候再执行。</p>
<h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用 loader 进行转换。</p>
<p>Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，返回转换的结果。这样，我们就可以通过 <code>require</code> 来加载任何类型的模块或文件，比如 CoffeeScript、 JSX、 LESS 或图片。</p>
<p>先来看看 loader 有哪些特性？</p>
<ul>
<li>Loader 可以通过管道方式链式调用，每个 loader 可以把资源转换成任意格式并传递给下一个 loader ，但是最后一个 loader 必须返回 JavaScript。</li>
<li>Loader 可以同步或异步执行。</li>
<li>Loader 运行在 node.js 环境中，所以可以做任何可能的事情。</li>
<li>Loader 可以接受参数，以此来传递配置项给 loader。</li>
<li>Loader 可以通过文件扩展名（或正则表达式）绑定给不同类型的文件。</li>
<li>Loader 可以通过 <code>npm</code>发布和安装。</li>
<li>除了通过 <code>package.json</code> 的 <code>main</code> 指定，通常的模块也可以导出一个 loader 来使用。</li>
<li>Loader 可以访问配置。</li>
<li>插件可以让 loader 拥有更多特性。</li>
<li>Loader 可以分发出附加的任意文件。<br>Loader 本身也是运行在 node.js 环境中的 JavaScript 模块，它通常会返回一个函数。大多数情况下，我们通过 npm 来管理 loader，但是你也可以在项目中自己写 loader 模块。</li>
</ul>
<p>按照惯例，而非必须，loader 一般以 <code>xxx-loader</code>的方式命名，<code>xxx</code>代表了这个 <code>loader</code> 要做的转换功能，比如<code>json-loader</code>。</p>
<p>在引用 loader 的时候可以使用全名 <code>json-loader</code>，或者使用短名 <code>json</code>。这个命名规则和搜索优先级顺序在 webpack 的 <code>resolveLoader.moduleTemplates api</code>中定义。</p>
<blockquote>
<p>Default: [“<em>-webpack-loader”, “</em>-web-loader”, “<em>-loader”, “</em>“]</p>
</blockquote>
<p>Loader 可以在 <code>require()</code> 引用模块的时候添加，也可以在 webpack 全局配置中进行绑定，还可以通过命令行的方式使用。<br>接上一节的例子，我们要在页面中引入一个 CSS 文件 style.css，首页将 style.css 也看成是一个模块，然后用 <code>css-loader</code> 来读取它，再用 <code>style-loader</code>把它插入到页面中。</p>
<pre><code>/* style.css */
body { background: yellow; }
</code></pre><p>修改 entry.js：</p>
<pre><code>require(&quot;!style!css!./style.css&quot;) // 载入style.css
document.write(&apos;It works.&apos;)
document.write(require(&apos;./module.js&apos;))
</code></pre><p>安装 loader：在控制台输入</p>
<blockquote>
<p>npm install css-loader style-loader</p>
</blockquote>
<p>重新编译打包，刷新页面，就可以看到黄色的页面背景了。</p>
<p>如果每次 require CSS 文件的时候都要写 loader 前缀，是一件很繁琐的事情。我们可以根据模块类型（扩展名）来自动绑定需要的 loader。<br>将 entry.js 中的 <code>require(&quot;!style!css!./style.css&quot;)</code>修改为 <code>require(&quot;./style.css&quot;)</code>，然后执行：</p>
<pre><code>webpack entry.js bundle.js --module-bind &apos;css=style!css&apos;
#有些环境下可能需要使用双引号
 webpack entry.js bundle.js --module-bind &quot;css=style!css&quot;
</code></pre><p>显然，这两种使用 loader 的方式，效果是一样的。</p>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>Webpack 在执行的时候，除了在命令行传入参数，还可以通过指定的配置文件来执行。默认情况下，会搜索当前目录的 <code>webpack.config.js</code> 文件，这个文件是一个 node.js 模块，返回一个 json 格式的配置信息对象，或者通过 <code>--config</code> 选项来指定配置文件。</p>
<p>继续我们的案例，在根目录创建 package.json 来添加 webpack 需要的依赖：</p>
<blockquote>
<p>{<br>  “name”: “webpack-example”,<br>  “version”: “1.0.0”,<br>  “description”: “A simple webpack example.”,<br>  “main”: “bundle.js”,<br>  “scripts”: {<br>    “test”: “echo \”Error: no test specified\” &amp;&amp; exit 1”<br>  },<br>  “keywords”: [<br>    “webpack”<br>  ],<br>  “author”: “zhaoda”,<br>  “license”: “MIT”,<br>  “devDependencies”: {<br>    “css-loader”: “^0.21.0”,<br>    “style-loader”: “^0.13.0”,<br>    “webpack”: “^1.12.2”<br>  }<br>}</p>
</blockquote>
<p>如果没有写入权限，请尝试如下代码更改权限</p>
<blockquote>
<p>chflags -R nouchg .<br>sudo chmod  775 package.json</p>
</blockquote>
<p>再次运行 npm install。</p>
<p>然后创建一个配置文件 webpack.config.js：</p>
<pre><code>var webpack = require(&apos;webpack&apos;)

module.exports = {
  entry: &apos;./entry.js&apos;,
  output: {
path: __dirname,
filename: &apos;bundle.js&apos;
  },
  module: {
loaders: [
  {test: /\.css$/, loader: &apos;style!css&apos;}
]
  }
}
</code></pre><p>同时简化 entry.js 中的 style.css 加载方式：</p>
<blockquote>
<p>require(‘./style.css’)</p>
</blockquote>
<p>最后运行 webpack，可以看到 webpack 通过配置文件执行的结果和上一章节通过命令行<code>webpack entry.js bundle.js --module-bind &#39;css=style!css&#39;</code> 执行的结果是一样的。</p>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>插件可以完成更多 loader 不能完成的功能。</p>
<p>插件的使用一般是在 <code>webpack</code>的配置信息 <code>plugins</code> 选项中指定。</p>
<p>Webpack 本身内置了一些常用的插件，还可以通过 npm 安装第三方插件。</p>
<p>接下来，我们利用一个最简单的 <code>BannerPlugin</code>内置插件来实践插件的配置和运行，这个插件的作用是给输出的文件头部添加注释信息。</p>
<p>修改 <code>webpack.config.js</code>，添加 <code>plugins</code>：</p>
<pre><code>var webpack = require(&apos;webpack&apos;)

module.exports = {
  entry: &apos;./entry.js&apos;,
  output: {
path: __dirname,
filename: &apos;bundle.js&apos;
  },
  module: {
loaders: [
  {test: /\.css$/, loader: &apos;style!css&apos;}
]
  },
  plugins: [
new webpack.BannerPlugin(&apos;This file is created by xiaoming&apos;)
  ]
}
</code></pre><p>然后运行 <code>webpack</code>，打开<code>bundle.js</code>，可以看到文件头部出现了我们指定的注释信息：</p>
<pre><code>/*! This file is created by zhaoda */
/******/ (function(modules) { // webpackBootstrap
/******/  // The module cache
/******/  var installedModules = {};
// 后面代码省略
</code></pre><h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>当项目逐渐变大，webpack 的编译时间会变长，可以通过参数让编译的输出内容带有进度和颜色。</p>
<blockquote>
<p>  webpack –progress –colors</p>
</blockquote>
<p>如果不想每次修改模块后都重新编译，那么可以启动监听模式。开启监听模式后，没有变化的模块会在编译后缓存到内存中，而不会每次都被重新编译，所以监听模式的整体速度是很快的。</p>
<blockquote>
<p>webpack –progress –colors –watch</p>
</blockquote>
<p>当然，使用 webpack-dev-server 开发服务是一个更好的选择。它将在 localhost:8080 启动一个 express 静态资源 web 服务器，并且会以监听模式自动运行 webpack，在浏览器打开 <a href="http://localhost:8080/" target="_blank" rel="external">http://localhost:8080/</a> 或 <a href="http://localhost:8080/webpack-dev-server/" target="_blank" rel="external">http://localhost:8080/webpack-dev-server/</a> 可以浏览项目中的页面和编译后的资源输出，并且通过一个 socket.io 服务实时监听它们的变化并自动刷新页面。</p>
<blockquote>
<h1 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h1><pre><code>$ npm install webpack-dev-server -g
</code></pre><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><p>$ webpack-dev-server –progress –colors</p>
</blockquote>
<h3 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h3><p>Webpack 的配置比较复杂，很容出现错误，下面是一些通常的故障处理手段。</p>
<p>一般情况下，webpack 如果出问题，会打印一些简单的错误信息，比如模块没有找到。我们还可以通过参数 <code>--display-error-details</code>来打印错误详情。</p>
<blockquote>
<p> $ webpack –display-error-details</p>
</blockquote>
<pre><code>Hash: a40fbc6d852c51fceadb
Version: webpack 1.12.2
Time: 586ms
Asset     Size  Chunks             Chunk Names
bundle.js  12.1 kB       0  [emitted]  main
   [0] ./entry.js 153 bytes {0} [built] [1 error]
   [5] ./module.js 43 bytes {0} [built]
    + 4 hidden modules

ERROR in ./entry.js
        Module not found: Error: Cannot resolve &apos;file&apos; or &apos;directory&apos; ./badpathmodule in /Users/zhaoda/data/projects/webpack-handbook/examples
resolve file
  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule doesn&apos;t exist
  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.webpack.js doesn&apos;t exist
  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.js doesn&apos;t exist
  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.web.js doesn&apos;t exist
      /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.json doesn&apos;t exist
resolve directory
  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule doesn&apos;t exist (directory default file)
  /Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule/package.json doesn&apos;t exist (directory description file)
[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule]
[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.webpack.js]
[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.js]
[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.web.js]
[/Users/zhaoda/data/projects/webpack-handbook/examples/badpathmodule.json]
 @ ./entry.js 3:0-26
</code></pre><p>Webpack 的配置提供了<code>resolve</code> 和 <code>resolveLoader</code> 参数来设置模块解析的处理细节，resolve 用来配置应用层的模块（要被打包的模块）解析，<code>resolveLoader</code> 用来配置<code>loader</code>模块的解析。</p>
<p>当引入通过 npm 安装的 node.js 模块时，可能出现找不到依赖的错误。Node.js 模块的依赖解析算法很简单，是通过查看模块的每一层父目录中的    <code>node_modules</code>文件夹来查询依赖的。当出现 Node.js 模块依赖查找失败的时候，可以尝试设置 <code>resolve.fallback</code> 和 <code>resolveLoader.fallback</code> 来解决问题。</p>
<blockquote>
<p>  module.exports = {<br>  resolve: { fallback: path.join(<strong>dirname, “node_modules”) },<br>  resolveLoader: { fallback: path.join(</strong>dirname, “node_modules”) }<br>};</p>
</blockquote>
<p>Webpack 中涉及路径配置最好使用绝对路径，建议通过 path.resolve(<strong>dirname, “app/folder”) 或 path.join(</strong>dirname, “app”, “folder”) 的方式来配置，以兼容 Windows 环境。</p>
<h3 id="模块规范"><a href="#模块规范" class="headerlink" title="模块规范"></a>模块规范</h3><ul>
<li><a href="http://wiki.commonjs.org/wiki/CommonJS" target="_blank" rel="external">CommonJS 规范</a></li>
<li><a href="https://github.com/amdjs/amdjs-api" target="_blank" rel="external">Asynchronous Module Definition</a></li>
<li><a href="https://github.com/cmdjs/specification/blob/master/draft/module.md" target="_blank" rel="external">Common Module Definition</a></li>
<li><a href="https://github.com/seajs/seajs/issues/242" target="_blank" rel="external">CMD 模块定义规范</a></li>
<li><a href="https://github.com/umdjs/umd" target="_blank" rel="external">Universal Module Definition</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="external">ECMAScript 6 Module</a></li>
<li><a href="https://my.oschina.net/felumanman/blog/263330" target="_blank" rel="external">关于 CommonJS AMD CMD UMD</a></li>
<li><a href="http://blog.3gcnbeta.com/2014/05/27/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E6%8E%A8%E8%8D%90requirejs-%E8%80%8C%E4%B8%8D%E6%98%AFseajs/" target="_blank" rel="external">为什么我推荐 requirejs 而不是 seajs</a></li>
<li><a href="https://www.zhihu.com/question/20351507" target="_blank" rel="external">AMD 和 CMD 的区别有哪些</a></li>
<li><a href="https://github.com/seajs/seajs/issues/547" target="_blank" rel="external">前端模块化开发的价值</a></li>
<li><a href="http://www.blueskyonmars.com/2009/01/29/what-server-side-javascript-needs/" target="_blank" rel="external">What Server Side JavaScript needs</a></li>
</ul>
<h3 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h3><ul>
<li><a href="http://requirejs.org/" target="_blank" rel="external">RequireJS</a></li>
<li><a href="https://github.com/cujojs/curl" target="_blank" rel="external">curl</a></li>
<li><a href="http://seajs.org/docs/" target="_blank" rel="external">Sea.js</a></li>
<li><a href="https://github.com/cooliejs/coolie.js" target="_blank" rel="external">coolie</a></li>
<li><a href="http://browserify.org/" target="_blank" rel="external">Browserify</a></li>
<li><a href="https://github.com/medikoo/modules-webmake" target="_blank" rel="external">modules-webmake</a></li>
<li><a href="https://github.com/substack/wreq" target="_blank" rel="external">wreq</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;webpack&quot;&gt;&lt;a href=&quot;#webpack&quot; class=&quot;headerlink&quot; title=&quot;webpack&quot;&gt;&lt;/a&gt;webpack&lt;/h2&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/01/17/call/"/>
    <id>http://yoursite.com/2017/01/17/call/</id>
    <published>2017-01-17T09:39:45.355Z</published>
    <updated>2017-01-17T09:51:34.687Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="JS中的call，-apply，bind方法"><a href="#JS中的call，-apply，bind方法" class="headerlink" title="JS中的call， apply，bind方法"></a>JS中的call， apply，bind方法</h2><p>在JavaScript中，call、apply和bind 是Function对象自带的三个方法，这三个方法的主要作用是改变函数中的this指向</p>
<h5 id="call、apply、bind方法的共同点和区别："><a href="#call、apply、bind方法的共同点和区别：" class="headerlink" title="call、apply、bind方法的共同点和区别："></a>call、apply、bind方法的共同点和区别：</h5><p>apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；<br>apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文（函数的每次调用都会拥有一个特殊值——本次调用的上下文（context）——这就是this关键字的值。）；<br>apply 、 call 、bind 三者都可以利用后续参数传参；<br>bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。<br><a id="more"></a></p>
<p>##一，call</p>
<h3 id="call"><a href="#call" class="headerlink" title="call(  )"></a>call(  )</h3><p>语法：call([thisObj[,arg1[, arg2[, [,.argN]]]]]) 定义：调用一个对象的一个方法，以另一个对象替换当前对象。</p>
<p>说明： call 方法可以用来代替另一个对象调用一个方法。<br>call 方法可将一个函数的对象上下文从初始的上下文改变为由 thisObj 指定的新对象。</p>
<p>thisObj的取值有以下4种情况：<br>（1） 不传，或者传null,undefined， 函数中的this指向window对象<br>（2） 传递另一个函数的函数名，函数中的this指向这个函数的引用<br>（3） 传递字符串、数值或布尔类型等基础类型，函数中的this指向其对应的包装对象，如 String、Number、Boolean<br>（4） 传递一个对象，函数中的this指向这个对象</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function a()&#123;   </div><div class="line">  console.log(this);   <span class="regexp">//</span>输出函数a中的this对象</div><div class="line">&#125;       </div><div class="line">function b()&#123;&#125;       </div><div class="line">var c=&#123;<span class="symbol">name:</span><span class="string">"call"</span>&#125;;    <span class="regexp">//</span>定义对象c  </div><div class="line">a.call();   <span class="regexp">//window</span></div><div class="line">a.call(null);   <span class="regexp">//window</span></div><div class="line">a.call(undefined);   <span class="regexp">//window</span></div><div class="line">a.call(<span class="number">1</span>);   <span class="regexp">//</span>Number</div><div class="line">a.call(<span class="string">''</span>);   <span class="regexp">//</span>String</div><div class="line">a.call(<span class="literal">true</span>);   <span class="regexp">//</span>Boolean</div><div class="line">a.call(b);   <span class="regexp">//function</span> b()&#123;&#125;</div><div class="line">a.call(c);   <span class="regexp">//</span>Object</div></pre></td></tr></table></figure>
<p>如果你不理解上面的，没关系，我们再来看一个例子<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function first()&#123;   </div><div class="line">  this.name = function()&#123;   </div><div class="line">    console.log(&quot;我是first内的方法&quot;);   </div><div class="line">  &#125;   </div><div class="line"></div><div class="line">&#125;   </div><div class="line"></div><div class="line">function second()&#123; </div><div class="line"></div><div class="line">  first.call(this); //此行代码执行后，当前的this指向了first（也可以说second继承了second）,也就是说通过改变this的指向来让它在second里也能拥有first的方法  </div><div class="line">&#125;   </div><div class="line">var f=new second();   </div><div class="line">f.name();   //调用的是first内的方法，将first的name方法交给second使用</div></pre></td></tr></table></figure></p>
<p>下面举个例子来说明这个问题</p>
<h4 id="example1"><a href="#example1" class="headerlink" title="example1"></a>example1</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function demo1()&#123;</div><div class="line">console.log(&quot;这是demo1&quot;);</div><div class="line">&#125;</div><div class="line">function demo2()&#123;</div><div class="line">console.log(&quot;这是demo2&quot;);</div><div class="line">&#125;</div><div class="line">demo1.call(demo2);</div><div class="line">结果：这是demo1</div></pre></td></tr></table></figure>
<p>这个例子是用demo1来替换demo2  </p>
<blockquote>
<p> 注意：js 中的函数其实是对象，函数名是对 Function 对象的引用。</p>
</blockquote>
<h4 id="example2"><a href="#example2" class="headerlink" title="example2"></a>example2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">function  Fruit()&#123;   </div><div class="line">  this.name =&quot; fruit&quot;;   </div><div class="line">  this.showName = function()&#123;   </div><div class="line">    console.log(this.name);   </div><div class="line">  &#125;   </div><div class="line">&#125;   </div><div class="line">function apple()&#123;   </div><div class="line">  this.name = &quot;apple&quot;;   </div><div class="line">&#125;   </div><div class="line">var  fruit = new  Fruit();   </div><div class="line">var apple = new appl();       </div><div class="line"> fruit.showName.call(apple);</div><div class="line">输出：apple</div></pre></td></tr></table></figure>
<p>根据上面的代码，我们可以看到apple里并没有showName方法，那为什么（this.name）的值是apple呢？</p>
<p>关键就在于最后一段代码（fruit.showName.call(apple)），意思是把fruit的方法放到apple上执行，也可以说，把fruit 的showName()方法放到 apple上来执行，所以this.name 应该是 apple。<br>简单点说就是apple通过this 调用了fruit 里面的showName方法</p>
<h4 id="example3-（继承）"><a href="#example3-（继承）" class="headerlink" title="example3 （继承）"></a>example3 （继承）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function Animal(name)&#123;   </div><div class="line">  this.name=name;   </div><div class="line">  this.showName=function()&#123;   </div><div class="line">   console.log(this.name);   </div><div class="line"> &#125;   </div><div class="line">&#125;   </div><div class="line">function Dog(name)&#123;   </div><div class="line">  Animal.call(this,name);   </div><div class="line">&#125;   </div><div class="line">var dog=new Dog(&quot;Crazy dog&quot;);   </div><div class="line">dog.showName();</div><div class="line">输出：Crazy dog</div></pre></td></tr></table></figure>
<p>Animal.call(this) 的意思就是使用 Animal对象代替this对象，那么Dog就能直接调用Animal的所有属性和方法。</p>
<h2 id="二-apply"><a href="#二-apply" class="headerlink" title="二  , apply( )"></a>二  , apply( )</h2><p>语法：apply([thisObj[,argArray]])</p>
<p>定义：应用某一对象的一个方法，用另一个对象替换当前对象。</p>
<p>说明：<br>如果 argArray 不是一个有效的数组或者不是 arguments 对象，那么将导致一个 TypeError。<br>如果没有提供 argArray 和 thisObj 任何一个参数，那么 Global 对象将被用作 thisObj， 并且无法被传递任何参数。</p>
<h4 id="call-和apply的区别"><a href="#call-和apply的区别" class="headerlink" title="call 和apply的区别"></a>call 和apply的区别</h4><p>一、call和apply相同点: </p>
<p>a） 产生的效果或作用完全相同；</p>
<p>b） 至少有一个参数；</p>
<p>c） 第一个参数必须有且是一个对象（Object）。</p>
<p>二、call和apply区别</p>
<p>传递参数的方式。用法上不同，主要是参数不完全同<br>三   实例说明</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">function Person(name,age) &#123;  </div><div class="line">this.name=name;  </div><div class="line">this.age=age;  </div><div class="line">this.money = 500;</div><div class="line">&#125; </div><div class="line"></div><div class="line">function myFun(money) &#123;        </div><div class="line">    alert(this.money);</div><div class="line">&#125;</div><div class="line"></div><div class="line">var money = 100;</div><div class="line">myFun(money); </div><div class="line">//return 100;  //window.myFun(money); save to myFun(money);</div><div class="line">//这个时候this指向的是window对象，其实myFun函数和定义的var money = 100;都作为window对象子对象（即全局对象）</div><div class="line"></div><div class="line">myFun.apply(window,[]);  //save to window.myFun.apply(window,[]);  </div><div class="line">//return 100;  //同上</div><div class="line"></div><div class="line">myFun.apply(new Person(&apos;zhangsan&apos;,23),[]);  </div><div class="line">//return 500, 空数组作为参数，仅符合语法要求</div><div class="line">//这个时候myFun方法里面的this指向的是new Person(&apos;zhangsan&apos;,23)对象，二不是myFun类(函数)，故弹出500</div><div class="line"></div><div class="line">myFun.call(new Person(&apos;zhangsan&apos;,23),money,300,&apos;mycardId&apos;);  </div><div class="line">//return 500, 后面money,300和mycardId是参数列表作为参数，一一列出</div><div class="line">//这个时候myFun方法里面的this指向的是new Person(&apos;zhangsan&apos;,23)对象，二不是myFun类(函数)，故弹出500</div></pre></td></tr></table></figure>
<h2 id="三、bind"><a href="#三、bind" class="headerlink" title="三、bind"></a>三、bind</h2><p>bind是在EcmaScript5中扩展的方法（IE6,7,8不支持）<br>bind() 方法与 apply 和 call 很相似，也是可以改变函数体内 this 的指向。</p>
<p>　　MDN的解释是：bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数</p>
<blockquote>
<p>  注意：bind方法的返回值是函数</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">var bar=function()&#123;   </div><div class="line">  console.log(this.x);   </div><div class="line">&#125;</div><div class="line">var foo = &#123; </div><div class="line">     x:3   </div><div class="line">&#125;   </div><div class="line">bar();  </div><div class="line">bar.bind(foo)();</div><div class="line"> /*或*/</div><div class="line">var func = bar.bind(foo);   </div><div class="line">func();</div><div class="line">输出：</div><div class="line">undefined</div><div class="line">3</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;JS中的call，-apply，bind方法&quot;&gt;&lt;a href=&quot;#JS中的call，-apply，bind方法&quot; class=&quot;headerlink&quot; title=&quot;JS中的call， apply，bind方法&quot;&gt;&lt;/a&gt;JS中的call， apply，bind方法&lt;/h2&gt;&lt;p&gt;在JavaScript中，call、apply和bind 是Function对象自带的三个方法，这三个方法的主要作用是改变函数中的this指向&lt;/p&gt;
&lt;h5 id=&quot;call、apply、bind方法的共同点和区别：&quot;&gt;&lt;a href=&quot;#call、apply、bind方法的共同点和区别：&quot; class=&quot;headerlink&quot; title=&quot;call、apply、bind方法的共同点和区别：&quot;&gt;&lt;/a&gt;call、apply、bind方法的共同点和区别：&lt;/h5&gt;&lt;p&gt;apply 、 call 、bind 三者都是用来改变函数的this对象的指向的；&lt;br&gt;apply 、 call 、bind 三者第一个参数都是this要指向的对象，也就是想指定的上下文（函数的每次调用都会拥有一个特殊值——本次调用的上下文（context）——这就是this关键字的值。）；&lt;br&gt;apply 、 call 、bind 三者都可以利用后续参数传参；&lt;br&gt;bind 是返回对应函数，便于稍后调用；apply 、call 则是立即调用 。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/01/07/git/"/>
    <id>http://yoursite.com/2017/01/07/git/</id>
    <published>2017-01-07T03:53:10.125Z</published>
    <updated>2017-01-17T10:57:14.917Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="Git-config全局配置"><a href="#Git-config全局配置" class="headerlink" title=" Git config全局配置"></a> Git config全局配置</h2><p>Git config全局配置<br><strong>git:提交前的强制检查各个项目用户邮箱设置</strong></p>
<blockquote>
<p> git   强制  邮箱<br><a id="more"></a></p>
</blockquote>
<p><strong>保证提交日志的准确性</strong><br>在提交时，user.name, user.email会进入日志。这些信息，是追踪代码变更的关键。<br>为了保证这些信息的准确性，在push时，强制检查，如果user.name和user.email信息不正确，则拒绝push。</p>
<p><strong>全局配置</strong><br>如果我们工作中只涉及一个git服务器，用一个全局配置就可以搞定了：</p>
<h3 id="全局配置代码"><a href="#全局配置代码" class="headerlink" title="全局配置代码"></a>全局配置代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> user.name <span class="string">"qweee.com"</span>git config --<span class="keyword">global</span> user.email <span class="string">"my email @qq.com"</span></div></pre></td></tr></table></figure>
<p><strong>工作在多个git项目</strong><br>但是我们可能同时工作在多个项目中，公司内部用自有的git管理项目，我们在github上还有自己的项目。<br>对于使用不同的用户身份，需要设置不用的sshkey，具体的配置可以看这里：[多个sshkey配置][1]<br>这个时候，对于user.name和user.email我们不能采用全局的配置。而是要对各个项目单独配置。<br><strong>项目配置</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config user.name <span class="string">"QQ号@.com"</span></div><div class="line">git config user.email <span class="string">"QQ号@.com"</span></div></pre></td></tr></table></figure></p>
<p><strong>忘了做配置</strong><br>对于项目配置，有时我们会忘记在git init或者git clone之后，配置user.name以及user.email。<br>如果有全局配置，则使用全局配置。如果没全局配置，报错。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[qcf@ssrc test]$ git ci -a -m <span class="string">'commit for testing no user.name empty'</span> *** Please tell me who you are. Run git config --<span class="keyword">global</span> user.email <span class="string">"you@example.com"</span>git config --<span class="keyword">global</span> user.name <span class="string">"Your Name"</span> to set your account<span class="string">'s default identity. Omit --global to set the identity only in this repository. fatal: empty ident name (for &lt;qq.com&gt;) not allowed</span></div></pre></td></tr></table></figure></p>
<p>报错能够及时纠正我们的错误，最糟糕的情况是：</p>
<blockquote>
<ul>
<li><strong>没有项目单独配置，提交的时候，自动采用全局配置。在发现问题之后需要对日志进行修复。</strong></li>
</ul>
</blockquote>
<p><strong>强制检查</strong></p>
<p>强制检查可以在服务器端push的时候检查，也可以在客户端进行检查，这里介绍使用`pre-commit钩子进行检查。<br>全局钩子的配置，可以参见这里: git全局钩子<br><strong>如何确定正确配置</strong></p>
<ul>
<li>确定没有全局配置</li>
<li>确定有项目配置</li>
</ul>
<p><strong>pre-commit hook</strong><br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">global_email=$(git config --<span class="keyword">global</span> user.email)global_name=$(git config --<span class="keyword">global</span> user.name) repository_email=$(git config user.email)repository_name=$(git config user.name) <span class="keyword">if</span> [ -z <span class="string">"$repository_email"</span> ] || [ -z <span class="string">"$repository_name"</span> ] || [ -n <span class="string">"$global_email"</span> ] || [ -n <span class="string">"$global_name"</span> ]; then <span class="comment"># user.email is empty echo "ERROR: [pre-commit hook] Aborting commit because user.email or user.name is missing. Configure them for this repository. Make sure not to configure globally." exit 1else # user.email is not empty exit 0fi</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;Git-config全局配置&quot;&gt;&lt;a href=&quot;#Git-config全局配置&quot; class=&quot;headerlink&quot; title=&quot; Git config全局配置&quot;&gt;&lt;/a&gt; Git config全局配置&lt;/h2&gt;&lt;p&gt;Git config全局配置&lt;br&gt;&lt;strong&gt;git:提交前的强制检查各个项目用户邮箱设置&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; git   强制  邮箱&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
